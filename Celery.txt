R_LUA_TNIL                      00000000
R_LUA_TBOOLEAN                  00000001
R_LUA_TVECTOR                   00000002
R_LUA_TNUMBER                   00000003
R_LUA_TLIGHTUSERDATA            00000004
R_LUA_TSTRING                   00000005
R_LUA_TTABLE                    00000006
R_LUA_TFUNCTION                 00000007
R_LUA_TTHREAD                   00000008
R_LUA_TUSERDATA                 00000009

L->extraspace                   0000006C
L->identity                     00000018

namecall                        00000060

lua state                       0079C851

luaU_deserialize                01410B90    __cdecl
luaL_checklstring               014079B0    __cdecl
lua_pushcclosure                01405FB0    __fastcall
luaC_step                       01419F30    __cdecl
luaF_newcclosure                01419910    __cdecl
luaF_newlclosure                01419960    __cdecl
luaM_malloc                     0141D7C0    __cdecl
luaC_link                       01419E80    __cdecl
luaB_wait                       008753D0    __cdecl
lua_touserdata                  014074A0    __cdecl
index2adr                       01405220    __fastcall
lua_tolstring                   01407090    __fastcall
tag_error                       01408140    __cdecl
luaV_tostring                   0141D430    __cdecl
luaV_tonumber                   0141D3D0    __cdecl
luaV_gettable_noindex           0141D240    __cdecl
luaV_gettable_noindex_opt       0141D220    __cdecl
lua_getfield_noindex            01406650    __fastcall
luaS_newlstr                    0141AF50    __cdecl
lua_typename                    01407580    __cdecl
lua_type                        01407540    __cdecl
luaL_typeerror                  01407FC0    __cdecl
getNamecallMethod               014076D0    __cdecl
lua_rawvalue                    014052D0    __cdecl
deobfuscate_closure             0141D5F0    __cdecl
luaL_error                      01407AB0    __cdecl
luaL_where                      014080C0    __cdecl
lua_pushvfstring                014064E0    __cdecl
lua_concat                      01405430    __cdecl
lua_error                       01405550    __cdecl
lua_getstack                    01412980    __cdecl
lua_getinfo                     014127F0    __cdecl
lua_pushfstring                 01406080    __cdecl
lua_pushlstring                 014061A0    __cdecl
luaD_reallocstack               01419F30    __cdecl
luaV_concat                     0141C850    __cdecl
lua_getmetatable                014057C0    __cdecl
lua_newthread                   01405C20    __cdecl
lua_pushinteger                 014060F0    __cdecl
lua_pushnumber                  01406260    __cdecl
lua_getfield                    01405720    __fastcall
luaV_gettable_opt               0141CFE0    __cdecl
luaD_precall                    014116A0    __cdecl
tryfuncTM                       01411A10    __cdecl
growCI                          01408280    __cdecl
luaT_gettmbyobj                 0141D4D0    __cdecl
luaD_reallocCI                  01408550    __cdecl
luaD_throw                      01408720    __cdecl
luaG_runerror                   014126D0    __cdecl
luaM_realloc                    0141D910    __cdecl
luaM_toobig                     0141DA20    __cdecl
luaD_call                       014081E0    __cdecl
luaU_execute                    01410B70    __cdecl
luaU_vm                         01409160    __cdecl
luaU_test_vm                    0140CAB0    __cdecl
f_call                          014051D0    __cdecl
lua_call                        01405320    __cdecl
lua_pcall                       01405EA0    __cdecl
luaF_newproto                   014199D0    __cdecl
spawn                           0079BBB0    __cdecl
luaL_checktype                  01407A50    __cdecl
luaL_getmetafield               01407BC0    __cdecl
lua_settop                      01406E90    __cdecl
lua_setmetatable                01406C20    __cdecl
luaL_argerror                   01407FC0    __cdecl
lua_settable                    01406E10    __cdecl
luaL_checkany                   01407940    __cdecl
lua_rawequal                    01406550    __cdecl
lua_pushboolean                 01405F60    __cdecl
lua_rawget                      014065D0    __cdecl
lua_rawset                      01406770    __cdecl
lua_rawgeti                     014066F0    __cdecl
lua_rawseti                     01406840    __cdecl
lua_yield                       01408970    __cdecl
lua_xmove                       014075E0    __cdecl
lua_next                        01405D30    __cdecl
lua_pushnil                     01406210    __cdecl
getfunc                         01413420    __cdecl
lua_pushvalue                   01406470    __cdecl
lua_isnumber                    01405AC0    __cdecl
lua_tonumber                    014071C0    __cdecl
lua_pushthread                  014063A0    __cdecl
lua_insert                      014059A0    __cdecl
lua_iscfunction                 01405A70    __cdecl
lua_setfenv                     01406AA0    __cdecl
lua_setfield                    01406B70    __stdcall
lua_getfenv                     01405680    __cdecl
(unlabeled)                     01406FC0    __cdecl
lua_newuserdata                 01405CB0    __cdecl
lua_createtable                 014054E0    __cdecl
lua_replace                     014069A0    __cdecl
lua_objlen                      01405DC0    __cdecl
luaL_ref                        01407E30    __cdecl
luaL_callmeta                   014078B0    __cdecl
lua_topointer                   01407240    __cdecl
lua_toboolean                   01406FC0    __cdecl

luaT_typenames                  01FD2540
xor_const                       0273A9E0
luaO_nilobject                  01FD11E8

Proto size                      00000054

L->top                          00000018
L->base                         00000014

Table->is_readonly              00000006
Table->sizearray                00000010

Closure->isC                    00000006
Closure->func                   00000018

closure obfuscation             00000002

p->sizelineinfo_comp            00000034
p->sizelineinfo                 0000003C
p->sizep                        00000044
p->sizecode                     00000048
p->sizek                        0000004C
p->code                         0000001C
p->sizelocvars                  00000040
p->sizeupvalues                 00000038
p->lineinfo                     00000008
p->k                            0000000C
p->source                       00000010
p->p                            00000014
p->lineinfo_comp                00000018
p->locvars                      00000020
p->upvalues                     00000024
p->nups                         00000050
p->numparams                    00000051
p->maxstacksize                 00000052
p->is_vararg                    00000053

proto obfuscation               00000001


